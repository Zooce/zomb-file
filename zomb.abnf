;; The ZOMB file format grammar in ABNF format.
;;
;; This ABNF definition of ZOMB is heavily influenced by the TOML ABNF found at:
;;      https://github.com/toml-lang/toml/blob/master/toml.abnf
;;
;; Credit to http://instaparse.mojombo.com/ as it was used for testing.

;; Top-Level Rules

zomb = decl *( separator decl ) [ separator ]

decl = kv-pair / macro-def / comment

;; Key-Value Pair Rules

kv-pair = string [ padding ] equals [ padding ] value

value = string-val / object-val / array-val / macro-expr-val

;; Object Rules

object = object-begin [ padding ] [ kv-pair-list ] object-end

macro-object = object-begin [ padding ] [ macro-kv-pair-list ] object-end

macro-kv-pair = string [ padding ] equals [ padding ] macro-value

;; Array Rules

array = array-begin [ padding ] [ value-list ] array-end

macro-array = array-begin [ padding ] [ macro-value-list ] array-end

;; Macro Expression Rules

macro-expr = macro-key [ macro-expr-params ] *( macro-accessor )

macro-expr-params = [ padding ] macro-params-begin [ padding ] value-list macro-params-end

macro-macro-expr = macro-key [ macro-macro-expr-params ] *( macro-accessor )

macro-macro-expr-params = [ padding ] macro-params-begin [ padding ] macro-value-list macro-params-end

macro-accessor = dot string

;; Macro Definition Rules

macro-def = macro-key [ padding ] [ macro-def-params ] [ padding ] equals [ padding ] macro-value

macro-def-params = macro-params-begin [ padding ] string-list macro-params-end

macro-value = macro-param-val / macro-string-val / macro-object-val / macro-array-val / macro-macro-expr-val

macro-key = dollar string

macro-param = percent string

;; Value and Concatenation Rules

; NOTE: macro-expr and macro-param in the following rules must evaluate to the corresponding type

string-val = any-string *( plus ( any-string / macro-expr ) )

object-val = object *( plus ( object / macro-expr ) )

array-val = array *( plus ( array / macro-expr ) )

macro-expr-val = macro-expr *( plus ( any-string / object / array / macro-expr ) )

macro-string-val = any-string *( plus ( any-string / macro-macro-expr / macro-param ) )

macro-object-val = macro-object *( plus ( macro-object / macro-macro-expr / macro-param ) )

macro-array-val = macro-array *( plus ( macro-array / macro-macro-expr / macro-param ) )

macro-macro-expr-val = macro-macro-expr *( plus ( any-string / macro-object / macro-array / macro-macro-expr / macro-param ) )

macro-param-val = macro-param *( plus ( any-string / macro-object / macro-array / macro-macro-expr / macro-param ) )

;; List Rules

string-list = string *( separator string ) [ separator ]

kv-pair-list = kv-pair *( separator kv-pair ) [ separator ]

value-list = value *( separator value ) [ separator ]

macro-kv-pair-list = macro-kv-pair *( separator macro-kv-pair ) [ separator ]

macro-value-list = macro-value *( separator macro-value ) [ separator ]

;; String Rules

string = bare-string / quoted-string

any-string = string / raw-string

bare-string = 1*( non-delimiter )

quoted-string = DQUOTE escaped-string DQUOTE

escaped-string = *( non-escaped / ( %x5C escaped ) )

raw-string = raw-line *( newline [ padding ] raw-line )

raw-line = %x5C.5C *any

non-delimiter = %x21 / %x23 / %x26-27 / %x2A / %x2D / %x2F-3C / %x3E-5A / %x5E-7A / %x7C / %x7E-10FFFF

;         "        \      b      f      n      r      t        uXXXX
escaped = DQUOTE / %x5C / %x62 / %x66 / %x6E / %x72 / %x74 / ( %x75 4HEXDIG )

non-escaped = WSP / %x21 / %x23-5B / %x5D-10FFFF

;; Comment Rule

comment = %x2F.2F *any

;; Special Delimiter Rules

dot = %x2E

dollar = %x24

equals = %x3D

plus = [ padding ] %x2B [ padding ]

comma = %x2C

percent = %x25

object-begin = %x7B

object-end = %x7D

array-begin = %x5B

array-end = %x5D

macro-params-begin = %x28

macro-params-end = %x29

;; Other Rules

newline = LF / CRLF

padding = 1*( WSP / newline / ( comment newline ) )

separator = padding / ( [ padding ] comma [ padding ] )

any = WSP / %x21-10FFFF
