// Syntax Grammar

file            -> declaration* EOF
declaration     -> var-decl | fun-decl | var-set-decl | pair | comment
comment         -> SLASH SLASH <any non-control unicode character>* NEWLINE
var-decl        -> DOLLAR string assignment
fun-decl        -> DOLLAR string LEFT_PAREN ( string ( COMMA string )* )* RIGHT_PAREN assignment
var-set-decl    -> DOLLAR string EQUAL LEFT_PAREN ( string ( COMMA string )* )+ RIGHT_PAREN NEWLINE
pair            -> string assignment
assignment      -> EQUAL value NEWLINE
value           -> string | object | array | var-use
object          -> LEFT_CURLY pair ( COMMA pair )* RIGHT_CURLY
array           -> LEFT_SQUARE value ( COMMA value )* RIGHT_SQUARE
string          -> STRING | escaped_string
escaped_string  -> QUOTE <any unicode character, except QUOTE must be escaped with '\'>* QUOTE
var-use         -> DOLLAR string ( DOT string )*
fun-use         -> DOLLAR string LEFT_PAREN ( param ( COMMA param )* )* RIGHT_PAREN
param           -> string | var-use | fun-use
whitespace      -> SPACE | NEWLINE | TAB

// Lexical Grammar

COMMA           -> ,
DOLLAR          -> $
EOF             -> <end of the file>
EQUAL           -> =
LEFT_CURLY      -> {
LEFT_PAREN      -> (
LEFT_SQUARE     -> [
NEWLINE         -> \n | \r\n
RIGHT_CURLY     -> }
RIGHT_PAREN     -> )
RIGHT_SQUARE    -> ]
SLASH           -> /
STRING          -> <any unicode character, except ' ' and ',' must be escaped with '\'>*
QUOTE           -> "
