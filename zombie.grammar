// Syntax Grammar

file            -> declaration* EOF
declaration     -> var-decl | fun-decl | pair | comment
comment         -> SLASH SLASH <any non-control unicode character>* NEWLINE
var-decl        -> DOLLAR STRING assignment
fun-decl        -> DOLLAR STRING LEFT_PAREN ( STRING ( COMMA STRING )* )* RIGHT_PAREN assignment
pair            -> STRING assignment
assignment      -> EQUAL value NEWLINE
value           -> STRING | escaped_string | object | array | var-use
object          -> LEFT_CURLY pair ( COMMA pair )* RIGHT_CURLY
array           -> LEFT_SQUARE value ( COMMA value )* RIGHT_SQUARE
escaped_string  -> QUOTE <any non-control unicode character, except QUOTE must be escaped with BACKSLASH>* QUOTE
var-use         -> DOLLAR STRING ( DOT STRING )*
fun-use         -> DOLLAR STRING LEFT_PAREN ( param ( COMMA param )* )* RIGHT_PAREN
param           -> STRING | var-use | fun-use

// Lexical Grammar

COMMA           -> ,
DOLLAR          -> $
EOF             -> <end of the file>
EQUAL           -> =
LEFT_CURLY      -> {
LEFT_PAREN      -> (
LEFT_SQUARE     -> [
NEWLINE         -> \n | \r\n
RIGHT_CURLY     -> }
RIGHT_PAREN     -> )
RIGHT_SQUARE    -> ]
SLASH           -> /
STRING          -> <any unicode character>*
QUOTE           -> "
