------------------------------------------------------------------------- Legend

+X     =>  1 or more of X
*X     =>  0 or more of X
*      =>  0 or more of anything
?X     =>  0 or 1 of X
( .. ) =>  group - treated as a single entity
X | Y  =>  X or Y
X - Y  =>  X excluding Y
'X'    =>  'X' single character literal
.X     =>  .X multi-character literal
X %    =>  X is recursive
X<p>   =>  X takes a parameter p (p can be used in the production)
<p>    =>  p is a parameter of a rule


----------------------------------------------------------------- Syntax Grammar
-- NOTE: all white space (whitespace | newline) is ignored between entities unless otherwise noted

zombie-file
    +decl .Eof

decl
    ( kv-pair | macro-decl ) separator

kv-pair %
    key '=' value

value
    number | string | ml-string | object | array | macro-use

object %
    '{' ?list<kv-pair> '}'

array %
    '[' ?list<value> ']'

macro-decl
    macro-key ?macro-decl-params '=' value

macro-key
    '$' key

macro-decl-params
    '(' list<key> ')'

macro-use %
    macro-key ?macro-use-params *key-accessor

macro-use-params
    '(' list<value> ')'

list<type>
    <type> *( separator <type> ) ?separator

key-accessor
    '.' key | '[' inclusive-range ']'

inclusive-range
    ?number '..' ?number

key
    string | number

ml-string
    +( '\\' *( character | whitespace ) newline )

string
    bare-string | quoted-string

bare-string
    +( character - delimiter )

quoted-string
    '"' escaped-string '"'

escaped-string
    *( *( character - escape ) *( '\' escape ) )

character
    0x20...0x10FFFF

number
    0 | 1-9 ( 0-9 )*

escape
    '"' | '\' | 'b' | 'f' | 'n' | 'r' | 't' | 'u' hex hex hex hex

hex
    0-9 | 'A'...'F' | 'a'...'f'

delimiter
    '\t'  // 0x09 .Tab
    '\n'  // 0x0A .LineFeed
    '\r'  // 0x0D .CarriageReturn
    ' '   // 0x20 .Space
    '"'   // 0x22 .Quote
    '$'   // 0x24 .Dollar
    '('   // 0x28 .OpenParen
    ')'   // 0x29 .CloseParen
    ','   // 0x2C .Comma
    '.'   // 0x2E .Dot
    '='   // 0x3D .Equals
    '['   // 0x5B .OpenSquare
    '\'   // 0x5C .ReverseSolidus
    ']'   // 0x5D .CloseSquare
    '{'   // 0x7B .OpenCurly
    '}'   // 0x7D .CloseCurly

separator
    whitespace | newline | ','

newline
    '\n' | '\r\n'

whitespace
    ' ' | '\t'


-- NOTE: comments are special because they can be placed anywhere as long as
         no other important token is on the rest of the line
comment
    '//' * newline


------------------------------------------------------- Lexical Grammar (Tokens)

.CloseCurly = '}'
.CloseParen = ')'
.CloseSquare = ']'
.Comma = ','
.Dollar = '$'
.Dot = '.'
.Equals = '='
.OpenCurly = '{'
.OpenParen = '('
.OpenSquare = '['

.Range = '..'
.Comment = comment
.Newline = newline
.Number = number
.String = string

.Eof = end of the file
